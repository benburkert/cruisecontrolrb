#!/usr/bin/env ruby
ENV["RAILS_ENV"] = 'production'
require File.dirname(__FILE__) + '/../config/boot'
require 'optparse'

OPTIONS = { :verbose => false }

project_name = nil

ARGV.options do |opts|
  script_name = File.basename($0)
  opts.banner = "Usage: cruise builder <project_name> []options]"

  opts.separator ""

  opts.on("-v", "--verbose", "Verbose logging") { OPTIONS[:verbose] = true }
  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }

  args = opts.parse!

  unless args.length == 1
    STDERR.puts "Project name not specified"
    STDERR.puts
    puts opts
    exit(-1)
  end

  project_name = args[0]
end

require RAILS_ROOT + "/config/environment"

project_path = File.expand_path(File.join(Configuration.builds_directory, project_name))

unless File.exist? project_path
  STDERR.puts "Project '#{project_name}' not found in '#{project_path}'"
  exit(-1)
end

begin
  Log.verbose = OPTIONS[:verbose]
  project = Project.load_or_create(project_path)

  # this will create builder.pid file in project's CC directory and grab an exclusive lock on it, or else blow up saying 
  # that something else is already locking it
  ProjectBlocker.block(project)

  STDOUT.puts "Builder for project '#{project.name}' started"
  Log.event "Builder for project '#{project.name}' started"

  Schedule.new(project, :poll_interval_sec => 10).run
rescue => e
  begin 
    Log.error(e.message)
    Log.error(e.backtrace)
  rescue => logging_error
    STDERR.puts e.message
    STDERR.puts e.backtrace
    STDERR.puts "Attempt to log the above error failed with this:"
    STDERR.puts logging_error.message
    STDERR.puts logging_error.backtrace
  end
  if (OPTIONS[:verbose])
    raise
  else
    STDERR.puts e.message
    exit(1)
  end
end


at_exit do
  begin 
    Log.event "Builder for project '#{project.name}' stopped"
    STDOUT.puts "Builder for project '#{project.name}' stopped"
    ProjectBlocker.release(project)
  rescue
    # ignore logging errors
  end
end