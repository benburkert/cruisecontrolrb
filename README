== CruiseControl.rb


=== What's this?
CruiseControl.rb is a continuous integration tool. Its basic purpose in life is to alert members of a software project 
when one of them checks into a source control system something that breaks the build.

CC.rb is easy to install, pleasant to use and simple to hack. It's written in Ruby.


=== The Concept

See Martin Fowler's article about Continuous Integration: http://martinfowler.com/articles/continuousIntegration.html


=== Basics

CC.rb consists of a builder and a dashboard. 

Builder is a daemon that polls source control every once in a while for new revisions.

When someone performs a check in, the builder detects it, updates its own copy of the project, runs the build and
notifies interested parties about build outcome.

Dashboard is a web application to monitor the status of project build and troubleshoot build failures.

Each installation of CC.rb may have multiple projects and multiple builders (one per project). There may also be
multiple installations of CC.rb per computer.


=== Prerequisites

* Ruby 1.8.4 or later
* Subversion client 1.3.2 or later
* svn and ruby executables must both be on the PATH.


=== Assumptions and limitations

* CC.rb currently only works with Subversion.
* Dashboard and all builders should run on the same computer.


=== Installation

1. Download and unpack CruiseControl.rb (below, we will refer to the place where you unpack it as <cruise>)

2. From <cruise>, run "cruise start".

3. Browse to http://localhost:3333. If the dashboard is running fine and dandy, you will see a page with
   CruiseControl.rb logo.

4. Run "cruise add your_project --url <URL of your_project Subversion trunk>". Optionally, you can specify username 
   and password by adding " --username <your_user> --password <your_password>" to the command. This creates a directory 
   for your_project's builds at <cruise>/builds/your_project/, and checks out your_project from subversion URL specified 
   to <cruise>/builds/your_project/work/. 

   Hint: Rakefile of your_project should be in <cruise>/builds/your_project/work/ directory, not anywhere under 
   it. A common mistake is to specify in --url option the root of project's SVN repository instead of the trunk. 
   Rakefile then ends up in <cruise>/builds/your_project/work/trunk/ and CC.rb does not see it there.

5. Refresh the dashboard. It should now display your_project, with status "Never built".

6. Go to <cruise>/builds/your_project/work/ and make the build pass. For a regular Rails app, this involves creating 
   a test database, editing database.yml to connect to that database, performing "rake RAILS_ENV=test db:migrate"
   and making sure that "rake test" passes.

7. Go back to <cruise> and run "cruise build your_project". This should build your_project, place build outputs into
   <cruise>/builds/your_project/build-<revision-number>/
 
   Hint: Monitor log/your_project_builder.log for any signs of trouble. Try to check in a change to your_project
   and see if builder can detect and build it.  Check your_project status in the dashboard.

   Hint: If you want to run your server on a different port, just use "cruise start -p <port>". 

   Hint: "cruise help" displays a list of commands, "cruise help <command>" displays options available for each command.


=== Files and folders

If CC.rb is unpacked into <cruise> directory, then:

  <cruise>/builds/ is the projects directory.

  <cruise>/builds/your_project/ is a directory for the project called "your_project".

  <cruise>/builds/your_project/work/ is a local copy of your_project's source code. Builder keeps it up to date 
  with the source control repository and runs builds against it.

  <cruise>/builds/your_project/build-123/ contains build status file, list of changed files, 
  and other "build artifacts" created while building revision 123.
    
  <cruise>/builds/your_project/project_config.rb is builder configuration for your_project.

  <cruise>/config/site_config.rb is the file where you can make centralized changes to the configuration of dashboard 
  and all builders.


=== What will it build by default?

By default, it will try to execute 'cruise' task if it is defined in your_project/Rakefile, otherwise it will try to 
perform standard Rails tasks that prepare a test database and run all tests. For a more detailed description, 
read http://cruisecontrolrb.rubyforge.org/rake_tasks.html


=== How to change what the build does?

'cruise' may be the task for a quick build, but you may also want to run a long build with all acceptance tests 
included. This can be done by assigning project.rake_task attribute in <cruise>/builds/your_project/project_config.rb:

  Project.configure do |project|
    ...
    project.rake_task = 'Big_Bertha_build'
    ...
  end

Or you may not want to deal with Rake at all, but build your project by make, Ant or MSBuild (yes, 
CC.rb can cope with non-Ruby projects!). This can be done by assigning project.build_command attribute in the 
same <cruise>/builds/your_project/project_config.rb file, like this:
  Project.configure do |project|
    ...
    project.build_command = 'my_build_script.sh'
    ...
  end

If project.build_command is set, CC.rb will change current working directory to <cruise>/builds/your_project/work/, 
invoke specified command and look at the exit code to determine whether the build passed or failed.

Note that you cannot specify both rake_task and build_command attributes project_config.rb. It doesn't make sense, 
anyway.


=== What should I do with custom build artifacts?

your_project may have a special build task, producing some output that you want to keep. Code coverage analysis is a 
good example. Before running the build, CC.rb sets OS variable CC_BUILD_ARTIFACTS to the directory where the build 
artifacts are collected. Make sure that your special task writes its output to that directory.
  
Displaying custom task outputs on the dashboard is not implemented yet.


=== Email notification

CruiseControl.rb can send email notices whenever build fails or is fixed. To make it happen, you need to tell it how 
to send email, and who to send it to. Do the following:

1. Configure SMTP server connection. Copy <cruise>/config/site_config.rb_example to ~cruise/config/site_config.rb, 
   read it and edit according to your situation.

2. Tell the builder, whom do you want to receive build notices. Copy ~cruise/config/project_config.rb_example to 
   ~cruise/builds/your_project/project_config.rb and edit the list of email addresses there.


=== Monitoring build status with CCTray

CCTray is a utility developed as part of CruiseControl.NET project that displays an icon in the bottom right corner of 
the screen. The icon changes its color to red when a build fails, and back to green when the 
build is fixed.

CruiseControl.rb can be monitored by CCTray (point it to http://<cruise_host>:<cruise_port>/projects).

This works only on a Windows desktop. Other build notification options (Atom feeds, Growl and Jabber) are in the works.


=== Build scheduling

By default, the builder polls Subversion every 10 seconds for new revisions. This can be changed by adding the 
following line to the ~cruise/builds/your_project/project_config.rb:

  Project.configure do |project|
    ...
    project.scheduler.polling_interval = 5.minutes
    ...
  end

What if you want a scheduler with some interesting logic? Well, a default scheduler can be substituted by placing 
your own scheduler implementation intpo the plugins directory and writing in 
~cruise/builds/your_project/project_config.rb something like this:

  Project.configure do |project|
    ...
    project.scheduler = MyCustomScheduler.new(project)
    ...
  end

After initializing everything, and loading the project (step that includes evaluation of project_config.rb), the
builder simply invokes project.scheduler.run. Look at app/models/polling_scheduler.rb to understand how 
a scheduler interacts with a project.


== Deleting a project

To remove your_project from CruiseControl.rb, kill its builder process and then delete the <cruise>/builds/your_project/
directory.


== Troubleshooting and support

Beware, at the time of this writing, CC.rb is very young and not very stable. Good news is that it's simple (much, much 
simpler than other CruiseControl incarnations). The dashboard is just a small Rails app, and the builder is little 
more than a dumb, single-threaded Ruby script. Therefore, it's easy to debug. So, you are your own support hotline. 
Don't forget to send us patches, please!

OK, that was the pep talk. If you have an issue that you cannot fix on your own, email Alex or Jeremy.


===Download the latest release from:

* http://rubyforge.org/frs/?group_id=2918


===Project web site

* http://rubyforge.org/projects/cruisecontrolrb/


===License:

* Apache Software License 2.0


---
Maintainers::
* Alexey Verkhovsky [averkhov at thoughtworks.com]
* Jeremy Stell-Smith [JStell-Smith at thoughtworks.com]

Contributors::
* Arthur Tam, Dmitry Verkhovsky, Joe Poon, Josh Evnin, Peter Zhao, Ricky Lui, Stephen Chu

(C) ThoughtWorks 2007
